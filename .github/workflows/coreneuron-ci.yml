name: CoreNEURON CI

concurrency:
  group: ${{ github.workflow }}#${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - master
      - release/**
  pull_request:
    branches:
      - master
      - release/**

env:
  BUILD_TYPE: Release
  DEFAULT_PY_VERSION: 3.8
  MACOSX_DEPLOYMENT_TARGET: 11.0

jobs:
  ci:
    runs-on: ${{ matrix.os }}

    name: ${{ matrix.os }} - ${{ toJson(matrix.config) }})

    env:
      SDK_ROOT: $(xcrun --sdk macosx --show-sdk-path)

    strategy:
      matrix:
        os: [ubuntu-20.04, macOS-11]
        config:
          # Defaults: CORENRN_ENABLE_MPI=ON
          - {cmake_option: "-DCORENRN_ENABLE_MPI_DYNAMIC=ON", flag_warnings: ON}
          - {cmake_option: "-DCORENRN_ENABLE_MPI_DYNAMIC=ON -DCORENRN_ENABLE_SHARED=OFF"}
          - {cmake_option: "-DCORENRN_ENABLE_MPI=OFF"}
          - {use_nmodl: ON, py_version: 3.7}
          - {use_nmodl: ON}
        include:
          - os: ubuntu-20.04
            config:
              gcc_version: 10
          - os: ubuntu-20.04
            config:
              cmake_option: -DCORENRN_ENABLE_DEBUG_CODE=ON
              documentation: ON
          - os: ubuntu-22.04
            config:
              sanitizer: address
          - os: ubuntu-22.04
            config:
              flag_warnings: ON
              sanitizer: undefined
      fail-fast: false

    steps:

      - name: Install homebrew packages
        if: startsWith(matrix.os, 'macOS')
        run: |
          brew update
          brew install bison boost ccache coreutils flex ninja openmpi
          echo /usr/local/opt/flex/bin:/usr/local/opt/bison/bin >> $GITHUB_PATH
        shell: bash

      - name: Install apt packages
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get install bison ccache doxygen flex libboost-all-dev \
            libfl-dev libopenmpi-dev ninja-build openmpi-bin
        shell: bash

      - name: Install specific apt packages
        if: startsWith(matrix.os, 'ubuntu') && matrix.config.gcc_version
        run: |
          sudo apt-get install gcc-${{matrix.config.gcc_version}}
          echo CC="gcc-${{matrix.config.gcc_version}}" >> $GITHUB_ENV
          echo CXX="g++-${{matrix.config.gcc_version}}" >> $GITHUB_ENV
        shell: bash

      - name: Set up Python3
        uses: actions/setup-python@v3
        with:
          python-version: ${{ env.PYTHON_VERSION }}
        env:
          PYTHON_VERSION: ${{matrix.config.py_version || env.DEFAULT_PY_VERSION}}

      - name: Install NMODL dependencies
        if: ${{ matrix.config.use_nmodl == 'ON' }}
        run: |
          python3 -m pip install --upgrade pip jinja2 pyyaml pytest sympy

      - uses: actions/checkout@v3

      - name: Install documentation dependencies
        if: ${{matrix.config.documentation == 'ON'}}
        working-directory: ${{runner.workspace}}/CoreNeuron
        run: |
          sudo apt-get install doxygen
          python3 -m pip install --upgrade pip
          python3 -m pip install --upgrade -r docs/docs_requirements.txt

      - name: Register compiler warning problem matcher
        if: ${{matrix.config.flag_warnings == 'ON'}}
        run: echo "::add-matcher::.github/problem-matchers/gcc.json"

      - name: Register sanitizer problem matcher
        if: ${{matrix.config.sanitizer}}
        run: echo "::add-matcher::.github/problem-matchers/${{matrix.config.sanitizer}}.json"

      - name: Hash config dictionary
        run: |
          cat << EOF > matrix.json
          ${{toJSON(matrix.config)}}
          EOF
          echo matrix.config JSON:
          cat matrix.json
          echo -----

      - name: Restore compiler cache
        uses: pat-s/always-upload-cache@v3
        with:
          path: |
            ${{runner.workspace}}/ccache
          key: ${{matrix.os}}-${{hashfiles('matrix.json')}}-${{github.ref}}-${{github.sha}}
          restore-keys: |
            ${{matrix.os}}-${{hashfiles('matrix.json')}}-${{github.ref}}-
            ${{matrix.os}}-${{hashfiles('matrix.json')}}-

      - name: Build and Test
        id: build-test
        shell: bash
        working-directory: ${{runner.workspace}}/CoreNeuron
        run:  |
          cmake_args=(${{matrix.config.cmake_option}})
          if [[ "${{ startsWith(matrix.os, 'macOS') }}" = "true" ]]; then
              cmake_args+=(-DCORENRN_ENABLE_OPENMP=OFF)
          else
              cmake_args+=(-DCORENRN_ENABLE_OPENMP=ON)
          fi

          if [[ "${{matrix.config.flag_warnings}}" == "ON" ]]; then
              cmake_args+=(-DCORENRN_EXTRA_CXX_FLAGS="-Wall")
          fi

          if [[ -n "${{matrix.config.sanitizer}}" ]]; then
              CC=$(command -v clang-14)
              CXX=$(command -v clang++-14)
              symbolizer_path=$(realpath $(command -v llvm-symbolizer-14))
              cmake_args+=(-DCMAKE_BUILD_TYPE=Custom \
                           -DCMAKE_C_FLAGS="-O1 -g -Wno-writable-strings" \
                           -DCMAKE_CXX_FLAGS="-O1 -g -Wno-writable-strings" \
                           -DLLVM_SYMBOLIZER_PATH="${symbolizer_path}" \
                           -DCORENRN_SANITIZERS=$(echo ${{matrix.config.sanitizer}} | sed -e 's/-/,/g'))
          else
              CC=${CC:-gcc}
              CXX=${CXX:-g++}
          fi
          
          echo "------- Build, Test and Install -------"
          mkdir build && cd build
          if [[ "$USE_NMODL" == "ON" ]]; then
              cmake_args+=(-DCORENRN_ENABLE_NMODL=ON "-DCORENRN_NMODL_FLAGS=sympy --analytic")
          fi
          cmake .. -G Ninja "${cmake_args[@]}" \
            -DCMAKE_C_COMPILER="${CC}" \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER="${CXX}" \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            "-DCMAKE_INSTALL_PREFIX=${{runner.workspace}}/install" \
            -DPYTHON_EXECUTABLE=$(command -v python3)
          if ccache --version | grep -E '^ccache version 4\.(4|4\.1)$'
          then
            echo "------- Disable ccache direct mode -------"
            # https://github.com/ccache/ccache/issues/935
            export CCACHE_NODIRECT=1
          fi
          ccache -z
          # Older versions don't support -v (verbose)
          ccache -vs 2>/dev/null || ccache -s
          cmake --build . --parallel
          ccache -vs 2>/dev/null || ccache -s
          ctest -T Test --output-on-failure
          cmake --build . --target install
        env:
          CCACHE_BASEDIR: ${{runner.workspace}}/CoreNeuron
          CCACHE_DIR: ${{runner.workspace}}/ccache
          USE_NMODL: ${{matrix.config.use_nmodl}}

      - uses: actions/upload-artifact@v3
        with:
          name: ctest-results-${{hashfiles('matrix.json')}}-sanitizer
          path: ${{runner.workspace}}/CoreNeuron/build/Testing/*/Test.xml

      # This step will set up an SSH connection on tmate.io for live debugging.
      # To enable it, you have to:
      #   * add 'live-debug-ci' to your PR title
      #   * push something to your PR branch (note that just re-running the pipeline disregards the title update)
      - name: live debug session on failure (manual steps required, check `.github/workflows/coreneuron-ci.yml`)
        if: failure() && contains(github.event.pull_request.title, 'live-debug-ci')
        uses: mxschmitt/action-tmate@v3

      - name: Documentation
        if: ${{ startsWith(matrix.os, 'ubuntu') && matrix.config.documentation == 'ON' }}
        id: documentation
        working-directory: ${{runner.workspace}}/CoreNeuron/build
        run: |
          echo "------- Build Doxygen Documentation -------";
          cmake --build . --target docs
          echo "-------- Disable jekyll --------";
          pushd docs;
          touch .nojekyll;
          echo ::set-output name=status::done
          
      - name: Deploy ðŸš€
        uses: JamesIves/github-pages-deploy-action@v4
        if: steps.documentation.outputs.status == 'done' && github.ref == 'refs/heads/master'
        with:
          branch: gh-pages # The branch the action should deploy to.
          folder: ${{runner.workspace}}/CoreNeuron/build/docs  # The folder the action should deploy.
          single-commit: true #have a single commit on the deployment branch instead of maintaining the full history
