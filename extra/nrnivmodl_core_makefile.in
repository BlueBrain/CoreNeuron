#
# This makefile has the rules necessary for making the custom version of coreneuron
# executable called "special-core" from various mod files.
# Mod files are looked up in the cwd, unless MODS_PATH is set

# Mechanisms version are by default 0.0, but should be overriden
MECH_NAME =
MECH_VERSION = 0.0
MODS_PATH = .
OUTPUT = @CMAKE_HOST_SYSTEM_PROCESSOR@_core

bindir = @CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_BINDIR@
libdir = @CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_LIBDIR@
incdir = @CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_INCLUDEDIR@
datadir= @CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_DATADIR@

# Additional variables set in CMAKE usable here
# - @CORENRN_COMPILE_DEFS@
# - @CORENRN_LINK_DEFS@

LDFLAGS = @CORENRN_LINK_DEFS@ $(UserLDFLAGS)

# We rebuild the include dirs since a lot of stuff changes place
INCLUDES = -I$(incdir) -I$(incdir)/coreneuron/utils/randoms $(UserINCFLAGS)

ifneq (@MPI_C_INCLUDE_PATH@,)
    INCLUDES += -I@MPI_C_INCLUDE_PATH@
endif

ifneq (@reportinglib_INCLUDE_DIR@,)
    INCLUDES += -I@reportinglib_INCLUDE_DIR@
endif

CC = @CMAKE_C_COMPILER@
CXX = @CMAKE_CXX_COMPILER@
CFLAGS = @CMAKE_C_FLAGS@ -fPIC
CXXFLAGS = @CMAKE_CXX_FLAGS@ -fPIC

COMPILE = $(CC) $(CFLAGS) @CORENRN_COMPILE_DEFS@ $(INCLUDES)
CXXCOMPILE = $(CXX) $(CXXFLAGS) @CORENRN_COMPILE_DEFS@ $(INCLUDES)
CXX_LINK = $(CXX) $(CXXFLAGS) $(LDFLAGS)
CXX_LINK_EXE = $(CXX_LINK) @CMAKE_EXE_LINKER_FLAGS@
CXX_LINK_SHARED = $(CXX_LINK) @CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS@ @CMAKE_SHARED_LINKER_FLAGS@

CORENRNLIB_FLAGS = -L$(libdir) -lcoreneuron

MODC_DIR = modc_core
OBJS_DIR = mechbuild_core
mod_files = $(wildcard $(MODS_PATH)/*.mod)
mod_names = $(notdir $(mod_files:.mod=))
modc_files = $(addprefix $(MODC_DIR)/,$(addsuffix .cpp,$(mod_names)))
mod_objs   = $(addprefix $(OBJS_DIR)/,$(addsuffix .o,$(mod_names)))
kinderiv_h = $(MODC_DIR)/_kinderiv.h

ifneq ($(MECH_NAME),)
    LIB_SUFFIX = _$(MECH_NAME)
endif

special  = $(OUTPUT)/special-core
coremech_libname = corenrnmech$(LIB_SUFFIX)-$(MECH_VERSION)
coremech_lib = $(OUTPUT)/lib$(coremech_libname)@CMAKE_SHARED_LIBRARY_SUFFIX@


# ======== MAIN BUILD RULES ============

$(special): $(coremech_lib)
	# Take the main and link with nrnmech.
	# RPATH is set for ORIGIN and coreneuron lib
	$(CXX_LINK_EXE) $(libdir)/libcoreneuron_main.a -L $(OUTPUT) -l$(coremech_libname) \
	  $(CORENRNLIB_FLAGS) -Wl,-rpath,'$$ORIGIN' -Wl,-rpath,$(libdir) -o $(special)


$(coremech_lib): mod_func.o $(mod_objs)
	@echo BUILDING lib $(coremech_lib) from Mod files $(mod_files)
	$(CXX_LINK_SHARED) mod_func.o $(mod_objs) $(CORENRNLIB_FLAGS) -o ${coremech_lib}


$(OBJS_DIR)/%.o: $(MODC_DIR)/%.cpp $(kinderiv_h)
	$(CXXCOMPILE) -c $< -o $@


$(MODC_DIR)/%.cpp: $(MODS_PATH)/%.mod | $(OUTPUT)
	MODLUNIT=$(datadir)/nrnunits.lib \
	  $(bindir)/mod2c_core $< -o $(MODC_DIR)/


# Mod registration: Generate mod_func and compile
mod_func.o: build_always
	perl $(datadir)/mod_func.c.pl $(notdir ${mod_files}) > mod_func.cpp
	$(CXXCOMPILE) -c mod_func.cpp


# Header to avoid function callbacks using function pointers
$(kinderiv_h): $(modc_files)
	python $(datadir)/kinderiv.py $(MODC_DIR)
	# copy props to avoid rebuild everything if not needed
	cp -p _kinderiv.h $(kinderiv_h)


# == AUX ==

$(OUTPUT):
	mkdir -p $(OUTPUT)
	mkdir -p $(MODC_DIR)
	mkdir -p $(OBJS_DIR)

.PHONY: build_always
